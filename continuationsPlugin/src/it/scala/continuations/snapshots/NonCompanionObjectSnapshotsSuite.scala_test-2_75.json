["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(ExampleObject,Ident(ExampleObject$),Apply(Select(New(Ident(ExampleObject$)),<init>),List())), TypeDef(ExampleObject$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(ExampleObject)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object ExampleObject)))))), TypeDef(ExampleObject$continuations$1,Template(DefDef(<init>,List(List(ValDef($completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class ContinuationImpl)]),<init>),List(Ident($completion), Select(Ident($completion),context)))),ValDef(_,EmptyTree,EmptyTree),List(ValDef(I$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), ValDef(I$1,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), DefDef(I$0_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(I$1_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Ident(_)), ValDef($label,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Ident(_)), DefDef($result_=,List(List(ValDef(x$0,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef($label_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(invokeSuspend,List(List(ValDef(result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Block(List(Assign(Select(This(Ident(ExampleObject$continuations$1)),$result),Ident(result)), Assign(Select(This(Ident(ExampleObject$continuations$1)),$label),Apply(Select(Select(This(Ident(ExampleObject$continuations$1)),$label),|),List(Ident(MinValue))))),Apply(Ident(continuations),List(Literal(Constant(null)), TypeApply(Select(This(Ident(ExampleObject$continuations$1)),asInstanceOf),List(TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))]))))))))), DefDef(continuations,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],EmptyTree))),TypeTree[OrType(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],Block(List(ValDef(x##1,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Ident(x)), ValDef(z1,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(null))), DefDef(method1,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), Block(List(ValDef($continuation,TypeTree[OrType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Literal(Constant(null))), Match(Ident(completion),List(CaseDef(Bind(x$0,EmptyTree),Apply(Select(TypeApply(Select(Ident(x$0),isInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),&&),List(Apply(Select(Apply(Select(Select(TypeApply(Select(Ident(x$0),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$label),&),List(Ident(MinValue))),!=),List(Literal(Constant(0)))))),Block(List(Assign(Ident($continuation),TypeApply(Select(Ident(x$0),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])))),Assign(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$label),Apply(Select(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$label),-),List(Ident(MinValue)))))), CaseDef(Ident(_),EmptyTree,Assign(Ident($continuation),Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)]),<init>),List(TypeApply(Select(Ident(completion),asInstanceOf),List(TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))])))))))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$result))),Match(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$label),List(CaseDef(Literal(Constant(0)),EmptyTree,Block(List(If(Apply(Select(Ident($result),!=),List(Literal(Constant(null)))),Apply(TypeApply(Select(Ident($result),fold),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)])),List(Block(List(DefDef($anonfun,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],Apply(Ident(throw),List(Ident(x$0))))),Closure(List(),Ident($anonfun),EmptyTree)), Block(List(DefDef($anonfun,List(List(ValDef(x$0,TypeTree[OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(())))),Closure(List(),Ident($anonfun),EmptyTree)))),Literal(Constant(()))), Assign(Ident(z1),Literal(Constant(1))), Assign(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),I$0),Ident(x##1)), Assign(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),I$1),Ident(z1)), Assign(Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),$label),Literal(Constant(1))), ValDef(safeContinuation,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),class SafeContinuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Apply(TypeApply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),class SafeContinuation)]),<init>),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Apply(Apply(TypeApply(Ident(intercepted),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Ident($continuation))),List()), Select(Select(Ident(Continuation),State),Undecided)))), DefDef(method2,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Ident(x)), ValDef(z2,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1))), Apply(Select(Ident(safeContinuation),resume),List(Apply(TypeApply(Select(Ident(Right),apply),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)], TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)])),List(Apply(Select(Apply(Select(Apply(Select(Apply(Select(Apply(Ident(method1),List(Ident(x##1))),+),List(Apply(Ident(method2),List(Ident(x##1))))),+),List(Ident(z1))),+),List(Ident(z2))),+),List(Literal(Constant(1)))))))), Ident(x), ValDef(orThrow,TypeTree[OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],Apply(Select(Ident(safeContinuation),getOrThrow),List())), If(Apply(Select(Ident(orThrow),==),List(Select(Select(Ident(Continuation),State),Suspended))),Return(Select(Select(Ident(Continuation),State),Suspended),Ident(continuations)),EmptyTree)),Literal(Constant(())))), CaseDef(Literal(Constant(1)),EmptyTree,Block(List(Assign(Ident(x##1),Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),I$0)), Assign(Ident(z1),Select(TypeApply(Select(Ident($continuation),asInstanceOf),List(TypeTree[TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class <empty>)),module class ExampleObject$)),class ExampleObject$continuations$1)])),I$1)), If(Apply(Select(Ident($result),!=),List(Literal(Constant(null)))),Apply(TypeApply(Select(Ident($result),fold),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)])),List(Block(List(DefDef($anonfun,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],Apply(Ident(throw),List(Ident(x$0))))),Closure(List(),Ident($anonfun),EmptyTree)), Block(List(DefDef($anonfun,List(List(ValDef(x$0,TypeTree[OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(())))),Closure(List(),Ident($anonfun),EmptyTree)))),Literal(Constant(())))),Literal(Constant(())))), CaseDef(Ident(_),EmptyTree,Apply(Ident(throw),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class IllegalArgumentException)]),<init>),List(Literal(Constant(call to 'resume' before 'invoke' with coroutine)))))))))), DefDef(method3,List(List(ValDef(x,Ident(Int),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), ValDef(z3,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1)))),Apply(Select(Apply(Select(Apply(Select(Apply(Ident(method3),List(Ident(x##1))),+),List(Ident(z1))),+),List(Ident(z3))),+),List(Literal(Constant(1))))))))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(),Apply(Ident(println),List(Apply(Ident(continuations),List(Literal(Constant(1)), Ident(contImpl))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val ExampleObject: ExampleObject = new ExampleObject()\n  @SourceFile(\"compileFromString.scala\") final module class ExampleObject() extends Object() { \n    this: ExampleObject.type =>\n    private def writeReplace(): AnyRef = new scala.runtime.ModuleSerializationProxy(classOf[ExampleObject.type])\n    class ExampleObject$continuations$1($completion: continuations.Continuation[Any | Null]) extends continuations.jvm.internal.ContinuationImpl(\n      $completion\n    , $completion.context) {\n      var I$0: Any = _\n      var I$1: Any = _\n      def I$0_=(x$0: Any): Unit = ()\n      def I$1_=(x$0: Any): Unit = ()\n      var $result: Either[Throwable, Any | Null | continuations.Continuation.State.Suspended.type] = _\n      var $label: Int = _\n      def $result_=(x$0: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]): Unit = ()\n      def $label_=(x$0: Int): Unit = ()\n      protected override def invokeSuspend(\n        result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]\n      ): Any | Null = \n        {\n          this.$result = result\n          this.$label = this.$label.|(scala.Int.MinValue)\n          ExampleObject.continuations(null, this.asInstanceOf[continuations.Continuation[Int]])\n        }\n    }\n    def continuations(x: Int, completion: continuations.Continuation[Int]): \n      Int | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)\n     = \n      {\n        var x##1: Int = x\n        var z1: Int = null\n        def method1(x: Int): Int = x.+(1)\n        {\n          var $continuation: continuations.Continuation[Any] | Null = null\n          completion match \n            {\n              case x$0 @ <empty> if \n                x$0.isInstanceOf[ExampleObject.ExampleObject$continuations$1].&&(\n                  x$0.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$label.&(scala.Int.MinValue).!=(0)\n                )\n               => \n                $continuation = x$0.asInstanceOf[ExampleObject.ExampleObject$continuations$1]\n                $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$label = \n                  $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$label.-(scala.Int.MinValue)\n              case _ => \n                $continuation = new ExampleObject.ExampleObject$continuations$1(completion.asInstanceOf[continuations.Continuation[Any | Null]])\n            }\n          val $result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)] = \n            $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$result\n          $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$label match \n            {\n              case 0 => \n                if $result.!=(null) then \n                  $result.fold[Unit](\n                    {\n                      def $anonfun(x$0: Throwable): Nothing = throw x$0\n                      closure($anonfun)\n                    }\n                  , \n                    {\n                      def $anonfun(x$0: Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)): Unit = ()\n                      closure($anonfun)\n                    }\n                  )\n                 else ()\n                z1 = 1\n                $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].I$0 = x##1\n                $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].I$1 = z1\n                $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].$label = 1\n                val safeContinuation: continuations.SafeContinuation[Int] = \n                  new continuations.SafeContinuation[Int](continuations.intrinsics.IntrinsicsJvm$package.intercepted[Int]($continuation)(), \n                    continuations.Continuation.State.Undecided\n                  )\n                def method2(x: Int): Int = x\n                val z2: Int = 1\n                safeContinuation.resume(Right.apply[Nothing, Int](method1(x##1).+(method2(x##1)).+(z1).+(z2).+(1)))\n                x\n                val orThrow: Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State) = \n                  safeContinuation.getOrThrow()\n                if orThrow.==(continuations.Continuation.State.Suspended) then return continuations.Continuation.State.Suspended\n                ()\n              case 1 => \n                x##1 = $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].I$0\n                z1 = $continuation.asInstanceOf[ExampleObject.ExampleObject$continuations$1].I$1\n                if $result.!=(null) then \n                  $result.fold[Unit](\n                    {\n                      def $anonfun(x$0: Throwable): Nothing = throw x$0\n                      closure($anonfun)\n                    }\n                  , \n                    {\n                      def $anonfun(x$0: Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)): Unit = ()\n                      closure($anonfun)\n                    }\n                  )\n                 else ()\n                ()\n              case _ => throw new IllegalArgumentException(\"call to \\'resume\\' before \\'invoke\\' with coroutine\")\n            }\n        }\n        def method3(x: Int): Int = x.+(1)\n        val z3: Int = 1\n        method3(x##1).+(z1).+(z3).+(1)\n      }\n  }\n  final lazy module val compileFromString$package: \n    compileFromString$package\n   = new compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromString$package.type])\n    def program: Unit = \n      {\n        println(ExampleObject.continuations(1, continuations.jvm.internal.ContinuationStub.contImpl))\n      }\n  }\n}"]